#ifndef MOENJIN_AST_ASTDECLS_H
#define MOENJIN_AST_ASTDECLS_H

namespace MoEnjin
{
	class Node;
	class Expression;
	class Statement;
	class AddExpression;
	class ApplyDotFunctionCallExpression;
	class ArgumentListNode;
	class ArgumentsNode;
	class ArrayExpression;
	class AssignBracketExpression;
	class AssignDotExpression;
	class AssignErrorExpression;
	class AssignResolveExpression;
	class BinaryExpression;
	class BitwiseAndExpression;
	class BitwiseOrExpression;
	class BitwiseNotExpression;
	class BitwiseXOrExpression;
	class BlockStatement;
	class BooleanExpression;
	class BracketAccessorExpression;
	class BracketFunctionCallExpression;
	class BreakStatement;
	class CallDotFunctionCallExpression;
	class CaseBlockNode;
	class CaseClauseNode;
	class ClauseListNode;
	class CommaExpression;
	class ConditionalExpression;
	class ConstDeclExpression;
	class ConstStatement;
	class ContinueStatement;
	class DebuggerStatement;
	class DeleteBracketExpression;
	class DeleteDotExpression;
	class DeleteResolveExpression;
	class DeleteValueExpression;
	class DivideExpression;
	class DotAccessorExpression;
	class DotFunctionCallExpression;
	class DoWhileStatement;
	class Element;
	class EmptyStatement;
	class EqualExpression;
	class EqualStrictExpression;
	class EvalFunctionCallExpression;
	class EvalStatement;
	class ExpressionStatement;
	class ForInStatement;
	class ForStatement;
	class FunctionDeclStatement;
	class FunctionExpression;
	class FunctionList;
	class FunctionNode;
	class GreaterEqualExpression;
	class GreaterExpression;
	class IfElseStatement;
	class IfStatement;
	class InExpression;
	class InstanceOfExpression;
	class LabelStatement;
	class LeftShiftExpression;
	class LessEqualExpression;
	class LessExpression;
	class LogicalExpression;
	class LogicalNotExpression;
	class ModulusExpression;
	class MultiplyExpression;
	class NegateExpression;
	class NewExpression;
	class NotEqualExpression;
	class NotEqualStrictExpression;
	class NullExpression;
	class NumberExpression;
	class ObjectLiteralExpression;
	class ParameterNode;
	class PostfixBracketExpression;
	class PostfixDotExpression;
	class PostfixErrorExpression;
	class PostfixResolveExpression;
	class PrefixBracketExpression;
	class PrefixDotExpression;
	class PrefixErrorExpression;
	class PrefixResolveExpression;
	class PrePostResolveExpression;
	class ProgramNode;
	class PropertyListNode;
	class PropertyNode;
	class ReadModifyBracketExpression;
	class ReadModifyDotExpression;
	class ReadModifyResolveExpression;
	class RegExExpression;
	class ResolvableExpression;
	class ResolveFunctionCallExpression;
	class ReturnStatement;
	class RightShiftExpression;
	class RightShiftUnsignedExpression;
	class ScopedStatement;
	class StatementList;
	class StringExpression;
	class SubtractExpression;
	class SwitchStatement;
	class ThisExpression;
	class ThrowableExpression;
	class ThrowableBinaryExpression;
	class ThrowStatement;
	class TryStatement;
	class TypeOfResolveExpression;
	class TypeOfValueExpression;
	class UnaryExpression;
	class UnaryPlusExpression;
	class ValueFunctionCallExpression;
	class VariableList;
	class VarStatement;
	class VoidExpression;
	class WhileStatement;
	class WithStatement;
}

#endif